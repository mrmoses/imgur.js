{"version":3,"sources":["/source/imgur.js","imgur.min.js"],"names":["global","factory","exports","module","require","define","amd","imgur","_","request","this","utils","API_URL","API_VERSION","CLIENT_ID","buildOptions","apiUrl","path","method","body","arguments","length","undefined","bearer","imgurAPICall","options","forEach","option","Error","authToken","send","set","promise","endpoint","bind","accountEndpoint__postOptions","accountEndpoint","extend","get","username","submissions","page","imageEndpoint","hash","upload","uploadParams","oauth2Endpoint","getAuthUrl","responseType","resType","queryString","join","exchange","code","clientSecret","grantType","postBody","client_id","client_secret","grant_type","refresh","refreshToken","topicsEndpoint","topicId","sort","requestPath","getDefaults","galleryPostEndpoint__postOptions","galleryPostEndpoint","REASON_DOES_NOT_BELONG_ON_IMGUR","report","reason","_handleVote","voteType","upvote","downvote","favorite","isAlbum","postType","comments","galleryEndpoint","section","showViral","post","commentEndpoint","commentId","deleteComment","submitComment","params","console","log","submitReply","clientKey","bearerKey","setUtil","key","value","getUtil","account","image","oauth2","topics","gallery","comment"],"mappings":"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","file":"imgur.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash'), require('superagent-bluebird-promise')) :\n    typeof define === 'function' && define.amd ? define(['lodash', 'superagent-bluebird-promise'], factory) :\n    global.imgur = factory(global._, global.request)\n}(this, function (_, request) { 'use strict';\n\n    var utils = {\r\n        API_URL: 'https://api.imgur.com',\r\n        API_VERSION: '3',\r\n        CLIENT_ID: '',\r\n        buildOptions: (apiUrl, path, method, body = {}) => {\r\n            return { apiUrl, path, method, body };\r\n        },\r\n        bearer: ''\r\n    };\n\n    var imgurAPICall = function(options) {\r\n        ['method', 'apiUrl', 'path', 'body'].forEach(option => {\r\n            if (!options[option]) {\r\n                throw new Error(`${option} must be specified`);\r\n            }\r\n        });\r\n\r\n        let authToken = `Client-ID ${utils.CLIENT_ID}`;\r\n\r\n        if(utils.bearer) {\r\n            authToken = `Bearer ${utils.bearer}`;\r\n        }\r\n\r\n        return request[options.method](`${options.apiUrl}/${options.path}`)\r\n            .send(options.body)\r\n            .set('Authorization', authToken)\r\n            .promise();\r\n    };\n\n    var endpoint = function(options) {\r\n        options.imgurAPICall = _.bind(imgurAPICall, options);\r\n        options.apiUrl = options.apiUrl || `${utils.API_URL}/${utils.API_VERSION}`;\r\n\r\n        return options;\r\n    }\n\n    const accountEndpoint__postOptions = {\r\n        path: 'account',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`\r\n    };\r\n\r\n    var accountEndpoint = endpoint(_.extend({}, accountEndpoint__postOptions, {\r\n        get(username) {\r\n            const options = utils.buildOptions(this.apiUrl, `${this.path}/${username}`, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        submissions: endpoint(_.extend({}, accountEndpoint__postOptions, {\r\n            get(username, page=0) {\r\n                const path = `${this.path}/${username}/submissions/${page}`;\r\n                const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n                return this.imgurAPICall(options);\r\n            }\r\n        }))\r\n    }));\n\n    var imageEndpoint = endpoint({\r\n        path: 'image',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\r\n        get(hash) {\r\n            const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        upload(uploadParams) {\r\n            const options = utils.buildOptions(this.apiUrl, `${this.path}`, 'post', uploadParams);\r\n\r\n            return this.imgurAPICall(options);\r\n        }\r\n    });\n\n    var oauth2Endpoint = endpoint({\r\n        path: 'oauth2',\r\n        apiUrl: utils.API_URL,\r\n        getAuthUrl(responseType) {\r\n            const resType = responseType || 'code';\r\n            const queryString = '?' + [\r\n                `response_type=${resType}`,\r\n                `client_id=${utils.CLIENT_ID}`\r\n            ].join('&');\r\n\r\n            const path = `${this.path}/authorize${queryString}`;\r\n            return `${this.apiUrl}/${path}`;\r\n        },\r\n        get(responseType) {\r\n            const resType = responseType || 'token';\r\n            const queryString = '?' + [\r\n                `response_type=${resType}`,\r\n                `client_id=${utils.CLIENT_ID}`\r\n            ].join('&');\r\n\r\n            const path = `${this.path}/authorize${queryString}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        exchange(responseType, code, clientSecret) {\r\n            const resType = responseType || 'code';\r\n            const grantType = resType === 'code' ? 'authorization_code' : resType;\r\n            \r\n            const postBody = {\r\n                'client_id': utils.CLIENT_ID,\r\n                'client_secret': clientSecret,\r\n                'grant_type': grantType\r\n            };\r\n            postBody[resType] = code;\r\n\r\n            const path = `${this.path}/token`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post', postBody);\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        refresh(refreshToken, clientSecret) {\r\n            const queryString = '?' + [\r\n                `refresh_token=${refreshToken}`,\r\n                `client_id=${utils.CLIENT_ID}`,\r\n                `client_secret=${clientSecret}`,\r\n                'grant_type=refresh_token'\r\n            ].join('&');\r\n\r\n            const path = `${this.path}/token${queryString}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        }\r\n    });\n\n    var topicsEndpoint = endpoint({\r\n        path: 'topics',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\r\n        get(topicId, sort='viral', page=0) {\r\n            const requestPath = `${this.path}/${topicId}/${sort}/${page}`;\r\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        getDefaults() {\r\n            const requestPath = `${this.path}/defaults`;\r\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        }\r\n    });\n\n    const galleryPostEndpoint__postOptions = {\r\n        path: 'gallery',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`\r\n    };\r\n\r\n    var galleryPostEndpoint = endpoint(_.extend({}, galleryPostEndpoint__postOptions, {\r\n        REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\r\n        get(hash) {\r\n            const path = `${this.path}/${hash}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        report(hash, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\r\n            if(!hash) { throw new Error('hash must be specified'); }\r\n\r\n            if(typeof reason !== 'number') {\r\n                throw new Error('the reason must be an integer');\r\n            }\r\n\r\n            const path = `${this.path}/${hash}/report`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        _handleVote(hash, voteType) {\r\n            if(!hash) { throw new Error('hash must be specified'); }\r\n\r\n            const path = `${this.path}/${hash}/vote/${voteType}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        upvote(hash) {\r\n            return this._handleVote(hash, 'up');\r\n        },\r\n        downvote(hash) {\r\n            return this._handleVote(hash, 'down');\r\n        },\r\n        favorite(hash, isAlbum) {\r\n            if(!hash) { throw new Error('hash must be specified'); }\r\n\r\n            if(isAlbum === undefined || typeof(isAlbum) !== 'boolean') {\r\n                throw new Error('isAlbum with type boolean must be specified');\r\n            }\r\n\r\n            const postType = isAlbum ? 'album' : 'image';\r\n            //doesn't use gallery path because it could be a non gallery item\r\n            const path = `${postType}/${hash}/favorite`;\r\n            const options =  utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        comments: endpoint(_.extend({}, galleryPostEndpoint__postOptions, {\r\n            get(hash, sort='best') {\r\n                const path = `${this.path}/${hash}/comments/${sort}`;\r\n                const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n                return this.imgurAPICall(options);\r\n            }\r\n        }))\r\n    }));\n\n    var galleryEndpoint = endpoint({\r\n        path: 'gallery',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\r\n        get(section='hot', sort='viral', page=0, showViral=true) {\r\n            const requestPath = `${this.path}/${section}/${sort}/${page}?showViral=${showViral}`;\r\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        post: galleryPostEndpoint\r\n    });\n\n    var commentEndpoint = endpoint({\r\n        path: 'comment',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\r\n        REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\r\n        get(commentId) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            const path = `${this.path}/${commentId}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        downvote(commentId) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            const path = `${this.path}/${commentId}/vote/down`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        upvote(commentId) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            const path = `${this.path}/${commentId}/vote/up`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        report(commentId, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            if(typeof reason !== 'number') {\r\n                throw new Error('the reason must be an integer');\r\n            }\r\n\r\n            const path = `${this.path}/${commentId}/report`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        deleteComment(commentId) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            const path = `${this.path}/${commentId}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'del');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        submitComment(params) {\r\n            ['image_id', 'comment'].forEach(option => {\r\n                console.log(!params[option]);\r\n                if (!params[option]) {\r\n                    throw new Error(`${option} must be specified`);\r\n                }\r\n            });\r\n\r\n            const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\r\n            return this.imgurAPICall(options);\r\n        },\r\n        submitReply(params) {\r\n            ['image_id', 'comment', 'parent_id'].forEach(option => {\r\n                if (!params[option]) {\r\n                    throw new Error(`${option} must be specified`);\r\n                }\r\n            });\r\n\r\n            const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\r\n            return this.imgurAPICall(options);\r\n        }\r\n    });\n\n    var imgur = function(clientKey, bearerKey) {\r\n        let setUtil = function(key, value) {\r\n            utils[key] = value;\r\n        };\r\n\r\n        let getUtil = function(key) {\r\n            return utils[key];\r\n        };\r\n\r\n        if (!clientKey) {\r\n            throw new Error('Client Key required to initialize imgur client');\r\n        }\r\n\r\n        setUtil('CLIENT_ID', clientKey);\r\n\r\n        if(bearerKey) {\r\n            setUtil('bearer', bearerKey);\r\n        }\r\n\r\n        return {\r\n            imgurAPICall,\r\n            CLIENT_ID: clientKey,\r\n            account: accountEndpoint,\r\n            image: imageEndpoint,\r\n            oauth2: oauth2Endpoint,\r\n            topics: topicsEndpoint,\r\n            gallery: galleryEndpoint,\r\n            comment: commentEndpoint,\r\n            setUtil,\r\n            getUtil\r\n        };\r\n    }\n\n    return imgur;\n\n}));\n",null],"sourceRoot":"/source/"}