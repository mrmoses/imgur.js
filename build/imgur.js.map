{"version":3,"sources":["imgur.js"],"names":[],"mappings":"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","file":"imgur.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash'), require('superagent-bluebird-promise')) :\n    typeof define === 'function' && define.amd ? define(['lodash', 'superagent-bluebird-promise'], factory) :\n    global.imgur = factory(global._, global.request)\n}(this, function (_, request) { 'use strict';\n\n    var utils = {\r\n        API_URL: 'https://api.imgur.com',\r\n        API_VERSION: '3',\r\n        CLIENT_ID: '',\r\n        buildOptions: (apiUrl, path, method, body = {}) => {\r\n            return { apiUrl, path, method, body };\r\n        },\r\n        bearer: ''\r\n    };\n\n    var imgurAPICall = function(options) {\r\n        ['method', 'apiUrl', 'path', 'body'].forEach(option => {\r\n            if (!options[option]) {\r\n                throw new Error(`${option} must be specified`);\r\n            }\r\n        });\r\n\r\n        let authToken = `Client-ID ${utils.CLIENT_ID}`;\r\n\r\n        if(utils.bearer) {\r\n            authToken = `Bearer ${utils.bearer}`;\r\n        }\r\n\r\n        return request[options.method](`${options.apiUrl}/${options.path}`)\r\n            .send(options.body)\r\n            .set('Authorization', authToken)\r\n            .promise();\r\n    };\n\n    var endpoint = function(options) {\r\n        options.imgurAPICall = _.bind(imgurAPICall, options);\r\n        options.apiUrl = options.apiUrl || `${utils.API_URL}/${utils.API_VERSION}`;\r\n\r\n        return options;\r\n    }\n\n    const accountEndpoint__postOptions = {\r\n        path: 'account',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`\r\n    };\r\n\r\n    var accountEndpoint = endpoint(_.extend({}, accountEndpoint__postOptions, {\r\n        get(username) {\r\n            const options = utils.buildOptions(this.apiUrl, `${this.path}/${username}`, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        submissions: endpoint(_.extend({}, accountEndpoint__postOptions, {\r\n            get(username, page=0) {\r\n                const path = `${this.path}/${username}/submissions/${page}`;\r\n                const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n                return this.imgurAPICall(options);\r\n            }\r\n        }))\r\n    }));\n\n    var imageEndpoint = endpoint({\r\n        path: 'image',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\r\n        get(hash) {\r\n            const options = utils.buildOptions(this.apiUrl, `${this.path}/${hash}`, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        upload(uploadParams) {\r\n            const options = utils.buildOptions(this.apiUrl, `${this.path}`, 'post', uploadParams);\r\n\r\n            return this.imgurAPICall(options);\r\n        }\r\n    });\n\n    var oauth2Endpoint = endpoint({\r\n        path: 'oauth2',\r\n        apiUrl: utils.API_URL,\r\n        getAuthUrl(responseType) {\r\n            const resType = responseType || 'code';\r\n            const queryString = '?' + [\r\n                `response_type=${resType}`,\r\n                `client_id=${utils.CLIENT_ID}`\r\n            ].join('&');\r\n\r\n            const path = `${this.path}/authorize${queryString}`;\r\n            return `${this.apiUrl}/${path}`;\r\n        },\r\n        get(responseType) {\r\n            const resType = responseType || 'token';\r\n            const queryString = '?' + [\r\n                `response_type=${resType}`,\r\n                `client_id=${utils.CLIENT_ID}`\r\n            ].join('&');\r\n\r\n            const path = `${this.path}/authorize${queryString}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        exchange(responseType, code, clientSecret) {\r\n            const resType = responseType || 'code';\r\n            const grantType = resType === 'code' ? 'authorization_code' : resType;\r\n            \r\n            const postBody = {\r\n                'client_id': utils.CLIENT_ID,\r\n                'client_secret': clientSecret,\r\n                'grant_type': grantType\r\n            };\r\n            postBody[resType] = code;\r\n\r\n            const path = `${this.path}/token`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post', postBody);\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        refresh(refreshToken, clientSecret) {\r\n            const queryString = '?' + [\r\n                `refresh_token=${refreshToken}`,\r\n                `client_id=${utils.CLIENT_ID}`,\r\n                `client_secret=${clientSecret}`,\r\n                'grant_type=refresh_token'\r\n            ].join('&');\r\n\r\n            const path = `${this.path}/token${queryString}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        }\r\n    });\n\n    var topicsEndpoint = endpoint({\r\n        path: 'topics',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\r\n        get(topicId, sort='viral', page=0) {\r\n            const requestPath = `${this.path}/${topicId}/${sort}/${page}`;\r\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        getDefaults() {\r\n            const requestPath = `${this.path}/defaults`;\r\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        }\r\n    });\n\n    const galleryPostEndpoint__postOptions = {\r\n        path: 'gallery',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`\r\n    };\r\n\r\n    var galleryPostEndpoint = endpoint(_.extend({}, galleryPostEndpoint__postOptions, {\r\n        REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\r\n        get(hash) {\r\n            const path = `${this.path}/${hash}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        report(hash, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\r\n            if(!hash) { throw new Error('hash must be specified'); }\r\n\r\n            if(typeof reason !== 'number') {\r\n                throw new Error('the reason must be an integer');\r\n            }\r\n\r\n            const path = `${this.path}/${hash}/report`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        _handleVote(hash, voteType) {\r\n            if(!hash) { throw new Error('hash must be specified'); }\r\n\r\n            const path = `${this.path}/${hash}/vote/${voteType}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        upvote(hash) {\r\n            return this._handleVote(hash, 'up');\r\n        },\r\n        downvote(hash) {\r\n            return this._handleVote(hash, 'down');\r\n        },\r\n        favorite(hash, isAlbum) {\r\n            if(!hash) { throw new Error('hash must be specified'); }\r\n\r\n            if(isAlbum === undefined || typeof(isAlbum) !== 'boolean') {\r\n                throw new Error('isAlbum with type boolean must be specified');\r\n            }\r\n\r\n            const postType = isAlbum ? 'album' : 'image';\r\n            //doesn't use gallery path because it could be a non gallery item\r\n            const path = `${postType}/${hash}/favorite`;\r\n            const options =  utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        comments: endpoint(_.extend({}, galleryPostEndpoint__postOptions, {\r\n            get(hash, sort='best') {\r\n                const path = `${this.path}/${hash}/comments/${sort}`;\r\n                const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n                return this.imgurAPICall(options);\r\n            }\r\n        }))\r\n    }));\n\n    var galleryEndpoint = endpoint({\r\n        path: 'gallery',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\r\n        get(section='hot', sort='viral', page=0, showViral=true) {\r\n            const requestPath = `${this.path}/${section}/${sort}/${page}?showViral=${showViral}`;\r\n            const options = utils.buildOptions(this.apiUrl, requestPath, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        post: galleryPostEndpoint\r\n    });\n\n    var commentEndpoint = endpoint({\r\n        path: 'comment',\r\n        apiUrl: `${utils.API_URL}/${utils.API_VERSION}`,\r\n        REASON_DOES_NOT_BELONG_ON_IMGUR: 1,\r\n        get(commentId) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            const path = `${this.path}/${commentId}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'get');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        downvote(commentId) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            const path = `${this.path}/${commentId}/vote/down`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        upvote(commentId) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            const path = `${this.path}/${commentId}/vote/up`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        report(commentId, reason = this.REASON_DOES_NOT_BELONG_ON_IMGUR) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            if(typeof reason !== 'number') {\r\n                throw new Error('the reason must be an integer');\r\n            }\r\n\r\n            const path = `${this.path}/${commentId}/report`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'post', { reason });\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        deleteComment(commentId) {\r\n            if(!commentId) { throw new Error('commentId must be specified'); }\r\n\r\n            const path = `${this.path}/${commentId}`;\r\n            const options = utils.buildOptions(this.apiUrl, path, 'del');\r\n\r\n            return this.imgurAPICall(options);\r\n        },\r\n        submitComment(params) {\r\n            ['image_id', 'comment'].forEach(option => {\r\n                console.log(!params[option]);\r\n                if (!params[option]) {\r\n                    throw new Error(`${option} must be specified`);\r\n                }\r\n            });\r\n\r\n            const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\r\n            return this.imgurAPICall(options);\r\n        },\r\n        submitReply(params) {\r\n            ['image_id', 'comment', 'parent_id'].forEach(option => {\r\n                if (!params[option]) {\r\n                    throw new Error(`${option} must be specified`);\r\n                }\r\n            });\r\n\r\n            const options = utils.buildOptions(this.apiUrl, this.path, 'post', params);\r\n            return this.imgurAPICall(options);\r\n        }\r\n    });\n\n    var imgur = function(clientKey, bearerKey) {\r\n        let setUtil = function(key, value) {\r\n            utils[key] = value;\r\n        };\r\n\r\n        let getUtil = function(key) {\r\n            return utils[key];\r\n        };\r\n\r\n        if (!clientKey) {\r\n            throw new Error('Client Key required to initialize imgur client');\r\n        }\r\n\r\n        setUtil('CLIENT_ID', clientKey);\r\n\r\n        if(bearerKey) {\r\n            setUtil('bearer', bearerKey);\r\n        }\r\n\r\n        return {\r\n            imgurAPICall,\r\n            CLIENT_ID: clientKey,\r\n            account: accountEndpoint,\r\n            image: imageEndpoint,\r\n            oauth2: oauth2Endpoint,\r\n            topics: topicsEndpoint,\r\n            gallery: galleryEndpoint,\r\n            comment: commentEndpoint,\r\n            setUtil,\r\n            getUtil\r\n        };\r\n    }\n\n    return imgur;\n\n}));\n"],"sourceRoot":"/source/"}